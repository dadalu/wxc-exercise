package leetcode.editor.cn;
//Ê±áÊÄªÂå∫Èó¥
//summary-ranges	
//228
//ÁªôÂÆö‰∏Ä‰∏™ Êó†ÈáçÂ§çÂÖÉÁ¥† ÁöÑ ÊúâÂ∫è Êï¥Êï∞Êï∞ÁªÑ nums „ÄÇ 
//
// ËøîÂõû ÊÅ∞Â•ΩË¶ÜÁõñÊï∞ÁªÑ‰∏≠ÊâÄÊúâÊï∞Â≠ó ÁöÑ ÊúÄÂ∞èÊúâÂ∫è Âå∫Èó¥ËåÉÂõ¥ÂàóË°® „ÄÇ‰πüÂ∞±ÊòØËØ¥Ôºånums ÁöÑÊØè‰∏™ÂÖÉÁ¥†ÈÉΩÊÅ∞Â•ΩË¢´Êüê‰∏™Âå∫Èó¥ËåÉÂõ¥ÊâÄË¶ÜÁõñÔºåÂπ∂‰∏î‰∏çÂ≠òÂú®Â±û‰∫éÊüê‰∏™ËåÉÂõ¥‰ΩÜ‰∏çÂ±û‰∫é 
//nums ÁöÑÊï∞Â≠ó x „ÄÇ 
//
// ÂàóË°®‰∏≠ÁöÑÊØè‰∏™Âå∫Èó¥ËåÉÂõ¥ [a,b] Â∫îËØ•ÊåâÂ¶Ç‰∏ãÊ†ºÂºèËæìÂá∫Ôºö 
//
// 
// "a->b" ÔºåÂ¶ÇÊûú a != b 
// "a" ÔºåÂ¶ÇÊûú a == b 
// 
//
// 
//
// Á§∫‰æã 1Ôºö 
//
// 
//ËæìÂÖ•Ôºönums = [0,1,2,4,5,7]
//ËæìÂá∫Ôºö["0->2","4->5","7"]
//Ëß£ÈáäÔºöÂå∫Èó¥ËåÉÂõ¥ÊòØÔºö
//[0,2] --> "0->2"
//[4,5] --> "4->5"
//[7,7] --> "7"
// 
//
// Á§∫‰æã 2Ôºö 
//
// 
//ËæìÂÖ•Ôºönums = [0,2,3,4,6,8,9]
//ËæìÂá∫Ôºö["0","2->4","6","8->9"]
//Ëß£ÈáäÔºöÂå∫Èó¥ËåÉÂõ¥ÊòØÔºö
//[0,0] --> "0"
//[2,4] --> "2->4"
//[6,6] --> "6"
//[8,9] --> "8->9"
// 
//
// 
//
// ÊèêÁ§∫Ôºö 
//
// 
// 0 <= nums.length <= 20 
// -2¬≥¬π <= nums[i] <= 2¬≥¬π - 1 
// nums ‰∏≠ÁöÑÊâÄÊúâÂÄºÈÉΩ ‰∫í‰∏çÁõ∏Âêå 
// nums ÊåâÂçáÂ∫èÊéíÂàó 
// 
//
// üëç 314 üëé 0

import java.util.ArrayList;
import java.util.List;

//JavaÔºöÊ±áÊÄªÂå∫Èó¥
public class SummaryRanges{
    public static void main(String[] args) {
        Solution solution = new SummaryRanges().new Solution();
        // TO TEST
    }
    //leetcode submit region begin(Prohibit modification and deletion)
class Solution {
    public List<String> summaryRanges(int[] nums) {
        List<String> rst = new ArrayList<>();
        if (nums.length == 0) {
            return rst;
        }
        int l = 0, r = 0;
        StringBuilder sb = new StringBuilder();
        int cur = 0;
        while (r <= nums.length) {
            if (r == nums.length) {
                if (l + cur == nums.length - 1) {
                    if (cur!=0) {
                        sb.append("->");
                        sb.append(nums[l + cur]);
                    }
                    rst.add(sb.toString());
                    break;
                }
            }
            if (l == r) {
                sb.append(nums[l]);
                r++;
                continue;
            }
            if (nums[l + cur] + 1 == nums[r]) {
                r++;
                cur++;
            } else {
                if (cur != 0) {
                    sb.append("->");
                    sb.append(nums[l + cur]);
                    rst.add(sb.toString());
                    sb = new StringBuilder();
                } else {
                    rst.add(sb.toString());
                    sb = new StringBuilder();
                }
                cur = 0;
                l = r;
            }
        }

        return rst;
    }
}
//leetcode submit region end(Prohibit modification and deletion)

}