package leetcode.editor.cn;
//ÈìæË°®Ê±ÇÂíå
//ÁªôÂÆö‰∏§‰∏™Áî®ÈìæË°®Ë°®Á§∫ÁöÑÊï¥Êï∞ÔºåÊØè‰∏™ËäÇÁÇπÂåÖÂê´‰∏Ä‰∏™Êï∞‰Ωç„ÄÇ 
//
// Ëøô‰∫õÊï∞‰ΩçÊòØÂèçÂêëÂ≠òÊîæÁöÑÔºå‰πüÂ∞±ÊòØ‰∏™‰ΩçÊéíÂú®ÈìæË°®È¶ñÈÉ®„ÄÇ 
//
// ÁºñÂÜôÂáΩÊï∞ÂØπËøô‰∏§‰∏™Êï¥Êï∞Ê±ÇÂíåÔºåÂπ∂Áî®ÈìæË°®ÂΩ¢ÂºèËøîÂõûÁªìÊûú„ÄÇ 
//
// 
//
// Á§∫‰æãÔºö 
//
// ËæìÂÖ•Ôºö(7 -> 1 -> 6) + (5 -> 9 -> 2)ÔºåÂç≥617 + 295
//ËæìÂá∫Ôºö2 -> 1 -> 9ÔºåÂç≥912
// 
//
// ËøõÈò∂ÔºöÊÄùËÄÉ‰∏Ä‰∏ãÔºåÂÅáËÆæËøô‰∫õÊï∞‰ΩçÊòØÊ≠£ÂêëÂ≠òÊîæÁöÑÔºåÂèàËØ•Â¶Ç‰ΩïËß£ÂÜ≥Âë¢? 
//
// Á§∫‰æãÔºö 
//
// ËæìÂÖ•Ôºö(6 -> 1 -> 7) + (2 -> 9 -> 5)ÔºåÂç≥617 + 295
//ËæìÂá∫Ôºö9 -> 1 -> 2ÔºåÂç≥912
// 
// Related Topics ÈÄíÂΩí ÈìæË°® Êï∞Â≠¶ 
// üëç 86 üëé 0

public class SumListsLcci{
    public static void main(String[] args) {
        Solution solution = new SumListsLcci().new Solution();
        
    }

//leetcode submit region begin(Prohibit modification and deletion)
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class ListNode {
    int val;
    ListNode next;
    ListNode(int x) { val = x; }
}
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode pre = new ListNode(0);
        ListNode ret = pre;
        ListNode cur = null;

        int f = 0;
        while (l1 != null && l2 != null) {
            int sum = l1.val + l2.val + f;
            f = sum / 10;
            sum = sum % 10;
            cur = new ListNode(sum);
            pre.next = cur;
            pre = cur;
            l1 =l1.next;
            l2 =l2.next;
        }

        while (l1 != null) {
            cur = new ListNode((l1.val+f)%10);
            f = (l1.val+f) / 10;
            pre.next = cur;
            pre = cur;
            l1 =l1.next;
        }
        while (l2 != null) {
            cur = new ListNode((l2.val+f) % 10);
            f = (l2.val+f) / 10;
            pre.next = cur;
            pre = cur;
            l2 =l2.next;
        }
        while (l1==null&&l2==null&&f != 0) {
            cur = new ListNode(f);
            f = f / 10;
            pre.next = cur;
            pre = cur;
        }
        return ret.next;
    }
}
//leetcode submit region end(Prohibit modification and deletion)

}